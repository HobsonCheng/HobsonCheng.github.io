<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaSE知识总结（01-基础知识）]]></title>
    <url>%2F2017%2F09%2F16%2FJavaSE%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[主要内容：Java历史背景 | Java的三大平台| Java语言特性| JDK的安装| 环境变量的配置| Java编译运行机制 基础知识Java概述Java历史背景 1982年，SUN(Stanford University Network)公司诞生于美国斯坦福大学校园，并于1986年上市。Java在NASDAQ（纳斯达克：是全美证券商协会自动报价系统）的标识为SUNW，2007年改为SUN。2009年4月20日19点40分，美国数据软件巨头甲骨文公司（Oracle）宣布以74亿美元收购SUN公司。 1995年5月，SUNW推出Java。它是Java面向对象程序设计语言和Java平台的总称。 Java的三大平台: 1999年SUN公司发布了基于Java的三个平台技术标准：J2SE,J2EE,J2ME。2005年开始分别改名为：JavaSE，JavaEE，JavaME。 ① Java SE（Java Platform Standard Edition）：Java标准平台，它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的Java 应用程序，如做一个桌面版的QQ，JavaSE能为Java EE和JavaME提供开发基础。 ② Java EE（Java Platform Enterprise Edition）：Java企业平台，可帮助开发和部署可移植、健壮、可伸缩且安全的服务器端Java应用程序，如企业的应用系统ERP等。Java EE是在Java SE的基础上构建的，它提供Web服务、组件模型、管理和通信API，可以用来实现企业级的面向服务体系结构（SOA）和Web等应用程序。 ③ Java ME（Java Platform Micro Edition）：Java微型平台，也叫K-JAVA，用来开发移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机等）。随着Android的迅猛发展，JavaME现在使用的越来越少了，Android会逐渐的取代JavaME的市场份额。 只有学好JavaSE才能很好的掌握JavaEE和Android的知识。 Java语言特性简单、面向对象、安全、跨平台、多线程、健壮、分布式等 Java开发环境配置 步骤1:安装JDK步骤2:配置PATH环境变量==注意==Mac系统内置Java开发运行环境，无需做以下操作。 JDK提供开发环境支持 Java程序是跨平台的，一次编译到处运行。这主要得益于Java虚拟机（Java Virtual Machine),简称JVM。它是运行所有Java程序的虚拟计算机，好比是街机游戏的模拟器。 JRE（Java Runtime Environment）中包含JVM，它是java的运行环境。如果要运行Java程序就需要JRE的支持。 JDK（Java Development Kit),包含Java开发的所有工具，JRE也包含其中，所以要想做Java开发，必须要安装JDK。 ==注意== Java程序是跨平台的，依赖于JVM。但是JVM不是跨平台的，所以不同平台要安装不同的JDK版本。JDK不要安装在带中文的路径下,最好也是不包含空格字符的英文路径; 环境变量的配置 JDK的目录结构如下 bin:存放了Java的操作工具，比如编译工具javac,启动JVM的java等。 db:存放了Java测试的数据库derby，企业不用。 include：存储C++的头文件。 jre:Java的运行环境，里面有JVM。 lib:Java运行的核心库。 src.zip：Java的源代码。 JDK安装好后，为了在任意位置，都可以使用Java开发的相关命令，就需要配置path环境变量。 右击计算机-&gt;属性-&gt;高级-&gt;环境变量 在用户变量中查看有无PATH变量（不区分大小写） 如果有就选中，点击编辑。在原有的变量值最后面加;然后将JDK安装目录的bin目录所在位置加到后面。 如果没有，点击新建，变量名为PATH，值为bin目录的所在位置。 点击确定。然后win + R输入cmd回车打开终端。 输入java -version,显示java版本号即为配置成功。 Java编译运行机制 Java源文件后缀名为.java，例如：Test.java 编写好的代码通过javac指令编译，例如javac Test.java生成后缀为.class的字节码文件,例如Test.class。 通过使用java指令运行字节码文件，例如java test。会将java程序转化程对应系统能识别的程序然后运行，实现跨平台。]]></content>
      <categories>
        <category>JavaSE总结</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSE知识总结（02-基本语法1）]]></title>
    <url>%2F2017%2F09%2F16%2FJavaSE%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%EF%BC%8802-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%951%EF%BC%89%2F</url>
    <content type="text"><![CDATA[主要内容： 运算符 | 顺序结构 | if分支 | switch分支 02 - 基本语法（2）运算符算数运算符 加号(+)：在操作数值、字符、字符串时其结果是不同的，当两个字符相加得到的是ASCII码表值，当两个字符串相加时表示将两个字符串连接在一起，从而组成新的字符串。 除号(/)：整数在使用除号操作时，得到的结果仍为整数（小数部分忽略），当整数除以0的时候，会引发算术异常。 正无穷大(Infinity):当一个正浮点类型数除以0时,或者正整数除以0.0时; 负无穷大(-Infinity):当一个负浮点类型数除以0时,或者负整数除以0.0时; NaN(Not a Number):当0.0除以0.0时; 注意：无穷大和NaN都属于double浮点类型,但是所有的正无穷大都是相等的,所有负无穷大也是相等的,所有的NaN永远不相等,也不等于自己. 取模(%)：模数的符号忽略不计，结果的正负取决于被模数. ++和–: 都只能操作变量,不能操作常量. 如果仅仅执行简单的是变量递增1操作，a++或++a都可以。 ++: 表示当前操作变量自己累加1. –: 表示当前操作变量自己减去1. 前置（++a）: 表示对result加1之后的结果进行运算， 后置（a++）: 表示对result变量加1之前的值（原始值）进行运算。 赋值运算符 将=右侧的值，给左边的变量保存。 12345678910//注意Java支持同时给多个变量赋值，好比支持同时声明多个变量一样，但因影响代码可读性，不推荐。public class Hello&#123; public static void main(String[] args)&#123;int a, b, c; //不推荐a = b = c = 5; //不推荐short s = 5;//s = s + 3;//编译出错，3默认int类型。需要强转 s = (short)(s + 3); s += 3;//编译OK，内部自动转换&#125;&#125; 比较运算符 用于比较两个变量或常量之间的关系，比较运算符的结果是boolean类型,其操作格式为: 逻辑运算符 &amp;：表示并且，当操作数A和B都为true结果才为true，否则结果result 是false。 &amp;&amp;：和&amp;结果相同，具有短路效果，如果左边操作数A是false，result 一定为false，且不运行B的运算。 |：表示或者，A和B都为false结果result为false，只要有A或B是true，结果就是true。 ||：和|结果相同，具有短路效果，如果左边操作数A是true，result一定为true，且不运行B的运算。 ^：判断A和B是否不同，不同则为true，相同则为false。 !：取反，!true结果是false，!fasle结果是true。 三元运算符 三元运算符，表示有三个元素参与的表达式，所以又称为三目运算符，其语义表示if-else. 语法格式：表达式1 ? 表达式2 ：表达式3， 其中表达式一为boolean类型表达式，先计算表达式1的值，若表达式一结果为true，则整个三目运算表达式的结果是表达式2的值，否则就是表达式3的值。 123a&gt;3 ? a+1 : a - 1;//如果a的值比3大，这个式子的值为a+1的值。//否则，这个式子的值为a-1的值。 位运算符 位运算符主要是对二进制数的一元、二元操作。 运算符的优先级和结合性 优先级：可以粗略的理解为优先级高的先算。 结合性：可以粗略的理解为从哪边开始算。 顺序结构 如果代码里没有流程控制，程序是按照书写的格式从上而下一行一行执行的，一条语句执行完之后继续执行下一条语句，中间没有判断和跳转，直到程序的结束。 分支结构（选择结构） 使用程序描述“如果今天是周一，就上班，如果今天是周二就逛街，如果今天是周三就去公园… …”。 程序具有多个条件，需要通过条件判断来决定程序具体做什么，这就需要分支结构。 通过判断条件来做选择的语句，我们称为选择语句或分支语句。 选择结构有两种：分别是if和switch。 if分支 if语句使用boolean表达式或boolean值作为选择条件，有三种结构形式： 第一种结构形式： 12345678if(boolean表达式)&#123; 条件执行体&#125;条件为true，就执行下面的代码块。--------------------------if语句的使用注意:1. 在if(boolean表达式)和&#123;&#125;之间是没有分号的.2. 如果if语句只控制一句话,那么可以不使用&#123;&#125;.不建议省略大括号。 第二种结构形式： 12345if(boolean表达式)&#123; 条件执行体A&#125;else&#123; 条件执行体B&#125; 第三种结构形式： 1234567if(boolean表达式A)&#123; 条件执行体A&#125;else if (boolean 表达式B)&#123; 条件执行体B&#125;else&#123; 条件执行体C&#125; switch分支switch语句结构的格式如下： switch(整型表达式){ case A值: 表达式结果等于A值时，执行此语句； break； case B值: 表达式结果等于条件2时，执行此语句； break； ... case C值: 表达式结果等于条件N时，执行此语句； break； default: 以上值都不满足时，执行此语句； break；//可以不写 } switch可以和if分支转换 switch语句 if语句 switch的使用细节和使用注意: switch语句适用于对多个整型值进行匹配判断，从而实现条件的分支控制。 switch()小括号里的值是除long之外的整型类型，也就是说switch支持的类型是byte，short，char，int。从Java5开始支持的枚举和Java7开始支持的String类。 和if语句不同的是： if语句()里的表达式是一个条件，所以表达式的结构可以任意写，而switch语句()里只是一个值，而且必须是整型。 if语句更强大,switch仅仅只是对整数类型的判断,使用更简单]]></content>
      <categories>
        <category>JavaSE总结</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MYSQL基本语法]]></title>
    <url>%2F2017%2F08%2F29%2FMYSQL%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[MYSQL语法库操作创建数据库1create database mydatabase charset utf8; 创建中文数据库12345create database 中国 charset utf8;-- 直接写会报语法错误，解决方案set names gbk;create database 中国 charset utf8; 查看数据库123456789-- 1.查看所有数据库show databases;-- 2.查看指定数据库show databases like &apos;pattern&apos;; -- parrern是匹配模式show databases like &apos;my%&apos;; -- 表示查看以my开头的数据库 -- % 表示匹配多个字符 -- _ 表示匹配单个字符-- 3.查看数据库创建信息show create database mydatabase; 更新数据库123-- 数据库名字不能修改-- 修改数据库字符集alter database mydatabase charset GBK; 删除数据库12-- 一定要先备份再删除drop database mydatabase; 表操作增加数据表123456789create table [if not exists] 表名( 字段名字 数据类型, 字段名字 数据类型 -- 最后一行不需要,)[表选项];-- if not exists 如果表名不存在就创建，否则不执行创建-- 表选项：控制表的表现 -- 字符集： charset/character set 具体字符集 -- 校对集：collate 具体校对集 -- 存储引擎：engine 具体存储引擎（innodb和myisam) 12345678910111213141516-- 任何一个表都需要制定数据库-- 1.显示的表放到数据库中create table if not exists mydatabase.student( name varchar(10), gender varchar(10), age int)charset utf8;-- 2.先进入某个数据库 常用！！！use mydatabase;create table if not exists student( name varchar(10), gender varchar(10), age int)charset utf8; 查看表12345678910-- 1.查看表show tables;-- 2.查看指定表show tables like &apos;stu%&apos;; -- 与表查询一样-- 3.查看创建表show create table student;-- 4.查看表结构desc student;describe student;show columns from student; 列属性 作用 Field 字段名 Type 字段类型 Null 是否可以为空 Key 索引类型 Default 默认值 Extra 补充 修改表123456-- 修改表名rename table 旧表名 to 新表名;rename table student to my_student;-- 修改表选项alter table 表名 表选项 = 值;alter table student charset=GBK; 删除表12-- 可以一次性删除多张表drop table 表名1,表名2...; 修改字段12345678910111213-- 新增字段alter table 表名 add [column] 字段名 数据类型 [列属性][位置]; -- 位置：字段名可以存放表中的任意位置 -- First：第一个位置 -- after 字段名 在某个字段后面添加 -- 默认是在最后一个字段后加-- 修改字段列属性alter table 表名 modify id varchar(3) after hobby;alter table my_student modify id varchar(3) after hobby;-- 重命名字段alter table 表名 change 旧字段名 新字段名 数据类型 [属性][位置];-- 删除字段alter table 表名 drop 字段名; 数据操作查看数据123456-- 查看所有数据select * from 表名 [where 条件];select * from my_student where id = 1;-- 查看指定字段的数据select 字段列表 from 表名 [where 条件];select id,sex from my_student where id = 1; 新增数据1234-- 1.给全表字段添加数据insert into 表名 values(值列表1),(值列表2)...;-- 2.给部分字段插入数据insert into 表名(字段列表) values(值列表1),(值列表2)...; 更新数据123456-- 1.全部修改update 表名 set 字段 = 值;update my_student set age = 14;-- 2.按条件修改update 表名 set 字段 = 值 [where 条件];update my_student set age = 11 where id = 3; 删除数据123456-- 1.删除所有数据delete from 表名;delete from my_student;-- 2.按条件删除数据delete from 表名 where 条件;delete from my_student where id = 1; 注释 -- 这是注释内容 # 这是注释内容 中文数据问题 计算机只识别二进制，人识别文字。二进制与文字对应关系（字符集）。 1234567891011-- 查看服务器支持的所有字符集show character set;-- 查看服务器默认对外的字符集show variables like &apos;character_set%&apos;;-- 修改服务器认为的客户端数据的字符集为GBKset character_set_client = gbk;-- 修改服务器返回给客户端的数据的字符集为GBKset character_set_results = gbk;-- 以上操作只是会话级别的，单次的。-- 快捷设置set names = gbk; 校对集问题 数据之间比较的方式 三种格式 _bin: binary，二进制比较，取出二进制位，一位一位进行比较 _cs: case sensitive,大小写敏感 _ci: case insensitive,大小写不敏感 1234567891011121314151617-- 查看数据库所支持的校对集：show collation;-- 1.以某种方式创建表create table my_collate_bin( name char(1))charset utf8 collate utf8_bin;create table my_collate_ci( name char(1))charset utf8 collate utf8_general_ci;-- 2.插入数据insert into my_collate_bin values(&apos;a&apos;),(&apos;A&apos;),(&apos;b&apos;),(&apos;B&apos;);insert into my_collate_ci values(&apos;a&apos;),(&apos;A&apos;),(&apos;b&apos;),(&apos;B&apos;);-- 3.排序查找select * from my_collate_bin order by name;select * from my_collate_ci order by name;-- 4.修改校对集，数据的排序不会发生变化alter table my_collate_ci collate = utf8_bin; web乱码问题 动态网站由三部分构成：浏览器，web服务器（apache，包含php)，数据库服务器。 三部分都有自己的字符集，来回传递数据很容易产生乱码。 统一编码（三码合一），主要靠php来做。]]></content>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法总结]]></title>
    <url>%2F2017%2F07%2F25%2FMarkdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[本文主要介绍markdown基本语法 Markdown 语法标题Markdown 语法： 123# 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ###### 第六级标题 `&lt;h6&gt;` 效果如下： 第一级标题 &lt;h1&gt;第二级标题 &lt;h2&gt;第六级标题 &lt;h6&gt; 强调Markdown 语法： 12345*这些文字会生成`&lt;em&gt;`*_这些文字会生成`&lt;u&gt;`_**这些文字会生成`&lt;strong&gt;`**__这些文字会生成`&lt;strong&gt;`__ 效果如下： 这些文字会生成&lt;em&gt;这些文字会生成&lt;u&gt; 这些文字会生成&lt;strong&gt;这些文字会生成&lt;strong&gt; 换行四个及以上空格加回车。 列表无序列表1234* 项目一 无序列表 `* + 空格键`* 项目二 * 项目二的子项目一 无序列表 `TAB + * + 空格键` * 项目二的子项目二 项目一 无序列表 * + 空格键 项目二 项目二的子项目一 无序列表 TAB + * + 空格键 项目二的子项目二 有序列表Markdown 语法： 123451. 项目一 有序列表 `数字 + . + 空格键`2. 项目二 3. 项目三 1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键` 2. 项目三的子项目二 效果如下： 项目一 有序列表 数字 + . + 空格键 项目二 项目三 项目三的子项目一 有序列表 TAB + 数字 + . + 空格键 项目三的子项目二 任务列表（Task lists）Markdown 语法： 12- [ ] 任务一 未做任务 `- + 空格 + [ ]`- [x] 任务二 已做任务 `- + 空格 + [x]` 效果如下： [ ] 任务一 未做任务 - + 空格 + [ ] [x] 任务二 已做任务 - + 空格 + [x] 图片Markdown 语法： 12![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)格式: ![Alt Text](url) 效果如下： 链接Markdown 语法： 123email &lt;example@example.com&gt;[GitHub](http://github.com)自动生成连接 &lt;http://www.github.com/&gt; Email 连接： &#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#109;连接标题Github网站自动生成连接像： http://www.github.com/ 这样 区块引用Markdown 语法： 123某某说:&gt; 第一行引用&gt; 第二行费用文字 效果如下： 某某说: 第一行引用第二行费用文字 行内代码Markdown 语法： 1像这样即可：`&lt;addr&gt;` `code` 像这样即可：&lt;addr&gt; code 多行或者一段代码Markdown 语法： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; 表格Markdown 语法： 1234第一格表头 | 第二格表头--------- | -------------内容单元格 第一列第一格 | 内容单元格第二列第一格内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 效果如下： 第一格表头 第二格表头 内容单元格 第一列第一格 内容单元格第二列第一格 内容单元格 第一列第二格 多加文字 内容单元格第二列第二格 删除线Markdown 语法： 加删除线像这样用： ~~删除这些~~ 效果如下： 加删除线像这样用： 删除这些 分隔线以下三种方式都可以生成分隔线： *** ***** - - - 效果如下：]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
